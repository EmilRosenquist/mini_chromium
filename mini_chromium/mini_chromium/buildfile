common_headers = atomicops                                        \
                 atomicops_internals_atomicword_compat            \
                 atomicops_internals_portable                     \
                 auto_reset                                       \
                 bit_cast                                         \
                 check                                            \
                 check_op                                         \
                 compiler_specific                                \
                 cxx17_backports                                  \
                 debug/alias                                      \
                 files/file_path                                  \
                 files/file_util                                  \
                 files/scoped_file                                \
                 format_macros                                    \
                 logging                                          \
                 memory/free_deleter                              \
                 memory/page_size                                 \
                 memory/scoped_policy                             \
                 metrics/histogram_functions                      \
                 metrics/histogram_macros                         \
                 metrics/persistent_histogram_allocator           \
                 notreached                                       \
                 numerics/checked_math                            \
                 numerics/checked_math_impl                       \
                 numerics/clamped_math                            \
                 numerics/clamped_math_impl                       \
                 numerics/safe_conversions                        \
                 numerics/safe_conversions_arm_impl               \
                 numerics/safe_conversions_impl                   \
                 numerics/safe_math                               \
                 numerics/safe_math_arm_impl                      \
                 numerics/safe_math_clang_gcc_impl                \
                 numerics/safe_math_shared_impl                   \
                 process/memory                                   \
                 rand_util                                        \
                 scoped_clear_last_error                          \
                 scoped_generic                                   \
                 strings/string_number_conversions                \
                 strings/string_piece                             \
                 strings/string_util                              \
                 strings/stringprintf                             \
                 strings/sys_string_conversions                   \
                 strings/utf_string_conversion_utils              \
                 strings/utf_string_conversions                   \
                 synchronization/condition_variable               \
                 synchronization/lock                             \
                 synchronization/lock_impl                        \
                 sys_byteorder                                    \
                 template_util                                    \
                 third_party/icu/icu_utf                          \
                 threading/thread_local_storage                   \
                 ../build/build_config                            \
                 ../build/buildflag

common_source =  debug/alias                                      \
                 files/file_path                                  \
                 files/scoped_file                                \
                 logging                                          \
                 process/memory                                   \
                 rand_util                                        \
                 strings/string_number_conversions                \
                 strings/stringprintf                             \
                 strings/utf_string_conversion_utils              \
                 strings/utf_string_conversions                   \
                 synchronization/lock                             \
                 third_party/icu/icu_utf                          \
                 threading/thread_local_storage

posix_fuchsia_headers = posix/eintr_wrapper                       \
                        posix/safe_strerror                       \
                        strings/string_util_posix

posix_fuchsia_source  = files/file_util_posix                     \
                        memory/page_size_posix                    \
                        posix/safe_strerror                       \
                        synchronization/condition_variable_posix  \
                        synchronization/lock_impl_posix           \
                        threading/thread_local_storage_posix

windows_headers = strings/string_util_win

windows_source  = memory/page_size_win                            \
                  scoped_clear_last_error_win                     \
                  strings/string_util_win                         \
                  synchronization/lock_impl_win                   \
                  threading/thread_local_storage_win

mac_headers = mac/foundation_util                                 \
              mac/mach_logging                                    \
              mac/scoped_cftyperef                                \
              mac/scoped_ioobject                                 \
              mac/scoped_launch_data                              \
              mac/scoped_mach_port                                \
              mac/scoped_mach_vm                                  \
              mac/scoped_nsautorelease_pool                       \
              mac/scoped_nsobject                                 \
              mac/scoped_typeref
              
mac_source = mac/close_nocancel                                   \
             mac/mach_logging                                     \
             mac/scoped_mach_port                                 \
             mac/scoped_mach_vm

lib{mini_chromium}: base/{hxx}{$common_headers} base/{cxx}{$common_source}
lib{mini_chromium}: base/{hxx}{$posix_fuchsia_headers} base/{cxx}{$posix_fuchsia_source}: include = ($cxx.target.class != 'windows')
lib{mini_chromium}: base/{hxx}{$windows_headers} base/{cxx}{$windows_source}: include = ($cxx.target.class == 'windows')
lib{mini_chromium}: base/{hxx}{$mac_headers} base/{cxx}{$mac_source}: include = ($cxx.target.class == 'macos')

libul{mini_chromium}: base/{hxx}{$common_headers} base/{cxx}{$common_source}: include = ($cxx.target.class == 'windows')
libul{mini_chromium}: base/{hxx}{$windows_headers} base/{cxx}{$windows_source}: include = ($cxx.target.class == 'windows')

switch $cxx.target.class
{
  case 'macos'
  {
    cxx.libs = -framework ApplicationServices \
               -framework CoreFoundation      \
               -framework Foundation          \
               -framework IOKit               \
               -framework Security
  }
  case 'linux'
  {
    cxx.libs += -lpthread
  }
  case 'windows'
  {
    cxx.libs = kernel32.lib \
               advapi32.lib
  }
}

switch $cxx.id
{
  case 'gcc'
  {
    cxx.poptions += -D_FILE_OFFSET_BITS=64
    cxx.coptions += -Wall \
                    -Wendif-labels \
                    -Werror \
                    -Wextra \
                    -Wextra-semi \
                    -Wheader-hygiene \
                    -Wnewline-eof \
                    -Wno-missing-field-initializers \
                    -Wno-unused-parameter \
                    -Wsign-compare \
                    -Wstring-conversion \
                    -Wvla \
                    -fno-exceptions \
                    -fno-rtti \
                    -fno-strict-aliasing \
                    -fobjc-call-cxx-cdtors \
                    -fstack-protector-all \
                    -fvisibility-inlines-hidden \
                    -fvisibility=hidden
  }
  case 'msvc'
  {
    cxx.poptions += -DUNICODE  \
                    -D_UNICODE \
                    -D_HAS_EXCEPTIONS=0 \
                    -D_CRT_SECURE_NO_WARNINGS \
                    -DNOMINMAX \
                    -DWIN32_LEAN_AND_MEAN
                    
    cxx.coptions += /FS \
                    /W4 \
                    /WX \
                    /Zi \
                    /bigobj \
                    /wd4100 \
                    /wd4127 \
                    /wd4324 \
                    /wd4351 \
                    /wd4577 \
                    /wd4996
  }
}

cxx.poptions =+ "-I$out_root/mini_chromium" "-I$src_root/mini_chromium"

libs{mini_chromium}: def{mini_chromium}: include = ($cxx.target.system == 'win32-msvc')
def{mini_chromium}: libul{mini_chromium}
if ($cxx.target.system == 'mingw32')
  cxx.loptions += -Wl,--export-all-symbols

lib{mini_chromium}:
{
  cxx.export.poptions = "-I$out_root/mini_chromium" "-I$src_root/mini_chromium"
}

if ($cxx.target.class == 'macos')
{
  define mm: file
  mm{*}: extension = mm
  macos_mm = base/strings/sys_string_conversions_mac \
            base/mac/scoped_nsautorelease_pool      \
            base/mac/foundation_util

  for n: $macos_mm
  {
    obja{$(n).a.o}: mm{$n}
    objs{$(n).so.o}: mm{$n}
  }

  liba{mini_chromium}: obja{$regex.apply($macos_mm,'(.+)','\1.a.o')}:  include = ($cxx.target.class == 'macos')
  libs{mini_chromium}: objs{$regex.apply($macos_mm,'(.+)','\1.so.o')}: include = ($cxx.target.class == 'macos')

  obja{~'/(.*).a/'}: mm{~'/\1/'}
  {{
    depdb dyndep "-I$out_root/mini_chromium" "-I$src_root/mini_chromium"  \
                --what=header --default-type=h                           \
                -- $cxx.path $cc.poptions $cxx.poptions                  \
                $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])
    diag obj-c++ ($<[0])
    $cxx.path $cc.poptions $cxx.poptions                                  \
              $cc.coptions $cxx.coptions $cxx.mode                        \
              -o $path($>) -c -x objective-c++ $path($<[0])
  }}

  objs{~'/(.*).so/'}: mm{~'/\1/'}
  {{
    depdb dyndep "-I$out_root/mini_chromium" "-I$src_root/mini_chromium"  \
                --what=header --default-type=h                           \
                -- $cxx.path $cc.poptions $cxx.poptions                  \
                $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])
    diag obj-c++ ($<[0])
    $cxx.path $cc.poptions $cxx.poptions                                  \
              $cc.coptions $cxx.coptions $cxx.mode                        \
              -o $path($>) -c -x objective-c++ $path($<[0])
  }}
}
# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{mini_chromium}: bin.lib.version = "-$version.project_id"
else
  lib{mini_chromium}: bin.lib.version = "-$version.major.$version.minor"

# Install into the mini_chromium/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/
  install.subdirs = true
}
